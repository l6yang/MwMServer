<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--指明 controller 所在包，并扫描其中的注解-->
    <context:component-scan base-package="com.mwm.loyal"/>
    <!-- 静态资源(js、image等)的访问 -->
    <mvc:default-servlet-handler/>
    <!-- 开启注解 -->
    <mvc:annotation-driven/>
    <!--静态引用资源文件 -->
    <!--静态文件放置的位置（注意img文件夹的位置和使用时的配置，不要放在WEB-INF文件夹下tomcat容器会给屏蔽掉）-->
    <mvc:resources mapping="/images/**" location="/images/"/>
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/css/**" location="/css/"/>
    <mvc:resources mapping="/*.html" location="/"/>
    <mvc:resources mapping="/*.jsp" location="/loyal/"/>
    <mvc:resources mapping="/apk/**" location="/apk/"/>
    <!--ViewResolver 视图解析器-->
    <!--用于支持Servlet、JSP视图解析-->
    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <bean id="paramResolver" class="org.springframework.web.servlet.mvc.multiaction.ParameterMethodNameResolver">
        <property name="paramName" value="method"/>
    </bean>

    <bean name="/action.do" class="com.mwm.loyal.action.AndroidAction">
        <property name="methodNameResolver" ref="paramResolver"/>
        <property name="service" ref="androidService"/>
    </bean>
    <!--数据库-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="oracle.jdbc.OracleDriver"/>
        <property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl"/>
        <property name="username" value="loyal"/>
        <!-- 数据库密码... -->
        <property name="password" value="111111"/>
    </bean>
    <!---->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--Mapped Statements collection already contains value for-->
        <!--1、遇到这种问题通常原因有两个：
            （1）相同的命名空间下有相同的id
            （2）sqlSessionFactory中配置了多个xml的地址。
            删除下面即可代码-->
        <!--2、将mybatis-config.xml中的<mappers></mappers>删除或注销-->
        <property name="mapperLocations" value="classpath:mybatis/*.xml"/>
    </bean>

    <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
    <!--Service-->
    <bean id="androidService" class="com.mwm.loyal.service.AndroidService">
        <property name="androidDao" ref="dao"/>
    </bean>
    <!--dao-->
    <bean id="dao" class="com.mwm.loyal.dao.AndroidDao">
        <property name="sessionTemplate" ref="sessionTemplate"/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--<import resource="classpath:mybatis-config.xml"/>-->
</beans>